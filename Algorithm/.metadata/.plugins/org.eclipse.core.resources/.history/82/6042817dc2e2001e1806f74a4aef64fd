package miracom.프로원정대13기.심화반사전테스트;

import java.io.*;
import java.util.*;

public class 발레공연 {
	static int[] danceTimes;
	static int n;
	static int maxTime;

	static boolean isOk(int stageSize) {
		PriorityQueue<Integer> currentDancing = new PriorityQueue<>();

		for (int x = 0; x < n; x++) {
			if (currentDancing.size() < stageSize) {
				currentDancing.add(danceTimes[x]);
			} else {
				// add the next cow in line to the one that will finish first
				currentDancing.add(currentDancing.remove() + danceTimes[x]);
			}
		}

		int lastFinish = Integer.MAX_VALUE;

		while (currentDancing.size() > 0) {
			lastFinish = currentDancing.remove();
		}
		return lastFinish <= maxTime;
	}

	public static void main(String[] args) throws IOException {
		Kattio io = new Kattio("cowdance");
		n = io.nextInt();
		maxTime = io.nextInt();
		danceTimes = new int[n];

		for (int x = 0; x < n; x++) { danceTimes[x] = io.nextInt(); }

		int low = 1;   // the lowest is only can fit one cow
		int high = n;  // the highest needed is fitting all of the cows at once

		while (low < high) {
			int mid = (low + high) / 2;
			if (isOk(mid)) {
				high = mid;
			} else {
				low = mid + 1;
			}
		}
		io.println(low);
		io.close();
	}

	//BeginCodeSnip{Kattio}
	static class Kattio extends PrintWriter {
		private BufferedReader r;
		private StringTokenizer st;
		// standard input
		public Kattio() { this(System.in, System.out); }
		public Kattio(InputStream i, OutputStream o) {
			super(o);
			r = new BufferedReader(new InputStreamReader(i));
		}
		// USACO-style file input
		public Kattio(String problemName) throws IOException {
			super(problemName + ".out");
			r = new BufferedReader(new FileReader(problemName + ".in"));
		}
		// returns null if no more input
		public String next() {
			try {
				while (st == null || !st.hasMoreTokens())
					st = new StringTokenizer(r.readLine());
				return st.nextToken();
			} catch (Exception e) { }
			return null;
		}
		public int nextInt() { return Integer.parseInt(next()); }
		public double nextDouble() { return Double.parseDouble(next()); }
		public long nextLong() { return Long.parseLong(next()); }
	}
	//EndCodeSnip
}
